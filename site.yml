---
- hosts: all
  become: yes

  tasks:
    - name: Additional Repos
      block:
        - name: Terraform
          shell: |
            wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/hashicorp.list
    
    - name: Upgrade all packages to the latest version
      apt:
        name: "*"
        state: latest
        update_cache: yes
        autoremove: true

    - name: Install Packages
      apt:
        name: "{{ apt_pkgs }}"
        state: latest
        autoremove: true

    # - name: Install Snap Packages
    #   community.general.snap:
    #     name: "{{ snap_pkgs }}"
    #     state: present

    # - name: Install Classic Snap Packages
    #   community.general.snap:
    #     name: "{{ snap_classic_pkgs }}"
    #     classic: yes
    #     state: present

    - name: Install AWS ClI
      shell: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update

    - name: Check for VS Code
      stat: 
        path: /snap/bin/code
      register: code_exists

    - name: Install VS Code
      apt:
        deb: https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64
      when: not code_exists.stat.exists

    - name: Check for Chrome
      stat: 
        path: /opt/google/chrome/chrome
      register: chrome_exists
    
    - name: Install Chrome
      apt:
        deb: https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
      when: not chrome_exists.stat.exists

    - name: Install Krew
      shell: |
        (
          set -x; cd "$(mktemp -d)" &&
          OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
          ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
          KREW="krew-${OS}_${ARCH}" &&
          curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
          tar zxvf "${KREW}.tar.gz" &&
          ./"${KREW}" install krew
        )

    - name: Check for git-prompt
      stat:
        path: "{{ lookup('env', 'HOME') }}/.git-prompt.sh"
      register: gitprompt_exists

    - name: Download git-prompt
      get_url:
        url: https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh
        dest: "{{ lookup('env', 'HOME') }}/.git-prompt.sh"
        mode: "0644"
        owner: "{{ lookup('env', 'USER') }}"
        group: "{{ lookup('env', 'USER') }}"
      when: not gitprompt_exists.stat.exists

    - name: Manage .bashrc
      blockinfile:
        path: "{{ lookup('env', 'HOME') }}/.bashrc"
        block: |
          # Krew Path
          export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

          # Git Prompt
          source ~/.git-prompt.sh
          PS1='$(__git_ps1 "(%s)")'$PS1
          # Git Helper Functions
          function gbclean() {
            local dest="${1:-develop}"
            git fetch --all --prune && git checkout ${dest} && git merge origin/${dest} && git branch --merged | egrep -v "(^\*|master|dev|${dest})" | xargs git branch -d && git checkout - > /dev/null 2>&1
          }

          # Aliases
          alias python='python3'
          alias kc='kubectl'
          alias giteod='git add . && git commit -m $(date "+%F-%H-%M-%S") && git push'
          
          # Go Lang
          export PATH=$PATH:/usr/local/go/bin:
          export PATH=$PATH:$(go env GOPATH)/bin

    - name: Create scripts directory
      ansible.builtin.file:
        path: "{{ lookup('env', 'HOME') }}/scripts"
        state: directory
        owner: "{{ lookup('env', 'USER') }}"
        group: "{{ lookup('env', 'USER') }}"

    - name: Copy Scripts
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ lookup('env', 'HOME') }}/scripts/"
        owner: "{{ lookup('env', 'USER') }}"
        group: "{{ lookup('env', 'USER') }}"
        mode: 0775
      with_fileglob: "*.sh"

    - name: Create .ssh config
      ansible.builtin.file:
        path: "{{ lookup('env', 'HOME') }}/.ssh/config.d"
        state: directory
        owner: "{{ lookup('env', 'USER') }}"
        group: "{{ lookup('env', 'USER') }}"
        
    - name: Copy .ssh config.d
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ lookup('env', 'HOME') }}/.ssh/config"
        owner: "{{ lookup('env', 'USER') }}"
        group: "{{ lookup('env', 'USER') }}"
        mode: 0664
      with_fileglob: "ssh_config"

    - name: Copy .ssh configs
      ansible.builtin.copy: 
        src: "{{ item }}"
        dest: "{{ lookup('env', 'HOME') }}/.ssh/config.d"
        owner: "{{ lookup('env', 'USER') }}"
        group: "{{ lookup('env', 'USER') }}"
        mode: 0664
      with_fileglob: "ssh_config_*"

    - name: Install Talosctl
      shell: |
        curl -Lo /usr/local/bin/talosctl https://github.com/siderolabs/talos/releases/download/v1.2.5/talosctl-$(uname -s | tr "[:upper:]" "[:lower:]")-amd64
        chmod +x /usr/local/bin/talosctl

    - name: Install Terragrunt
      get_url:
        url: https://github.com/gruntwork-io/terragrunt/releases/download/v0.42.5/terragrunt_linux_amd64
        dest: /usr/local/bin/terragrunt
        mode: "0777"
